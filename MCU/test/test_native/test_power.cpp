#include <unity.h>
#include "victronFunctions.h"

void setUp(void) {
}

void tearDown(void) {
}

void test_checksum() {
    unsigned char dataGS[] = { "allmyexesliveintexasandtexasisaplaceiddearlylovetobebutallmyexesliveintexasandthatswhyihangmyhatintennesseerosannasdownintexarkanawantedmetopushherbroomsweeteileensinabilenesheforgotihungthemoonandallisonsingalvestonsomehowlosthersanityanddimpleswhonowlivesintemplesgotthelawlookingformeallmyexesliveintexasandtexasisaplaceiddearlylovetobebutallmyexesliveintexasandthatswhyihangmyhatintennesseeirememberthatoldfrioriverwhereilearnedtoswimbutitbringstomindanothertimewhereiworemywelcomethinbytranscendentalmeditationigothereeachnightbutialwayscomebacktomyselflongbeforedaylightallmyexesliveintexasandtexasisaplaceiddearlylovetobebutallmyexesliveintexasthereforeiresideintennesseesomefolksthinkimhidinitsbeenrumoredthatidiedbutimaliveandwellintennesseek" };
    unsigned char dataV[] = { 0x0d, 0x0a, 0x50, 0x49, 0x44, 0x09, 0x30, 0x78, 0x32, 0x30, 0x33, 0x0d, 0x0a, 0x56, 0x09, 0x32, 0x36, 0x32, 0x30, 0x31, 0x0d, 0x0a, 0x49, 0x09, 0x30, 0x0d, 0x0a, 0x50, 0x09, 0x30, 0x0d, 0x0a, 0x43, 0x45, 0x09, 0x30, 0x0d, 0x0a, 0x53, 0x4f, 0x43, 0x09, 0x31, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x54, 0x54, 0x47, 0x09, 0x2d, 0x31, 0x0d, 0x0a, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x09, 0x4f, 0x46, 0x46, 0x0d, 0x0a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x09, 0x4f, 0x46, 0x46, 0x0d, 0x0a, 0x41, 0x52, 0x09, 0x30, 0x0d, 0x0a, 0x42, 0x4d, 0x56, 0x09, 0x37, 0x30, 0x30, 0x0d, 0x0a, 0x46, 0x57, 0x09, 0x30, 0x33, 0x30, 0x37, 0x0d, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x09, 0xd8 };
    size_t dataGS_size = 752;
    size_t dataV_size = 112;
    TEST_ASSERT_TRUE(victronChecksum(dataGS, dataGS_size));
    TEST_ASSERT_TRUE(victronChecksum(dataV, dataV_size));
};

void test_victron_parse() {
    unsigned char data[] = { "\r\ndata\tfield\r\ndata2\tfield2" };
    size_t data_size = 27;
    ShuntPowerData output;
    victronParse(output, data, data_size);
    TEST_ASSERT_EQUAL_STRING("data", output.labels[0].c_str());
    TEST_ASSERT_EQUAL_STRING("field", output.fields[0].c_str());
    TEST_ASSERT_EQUAL_STRING("data2", output.labels[1].c_str());
    TEST_ASSERT_EQUAL_STRING("field2", output.fields[1].c_str());
}

// function uses raw output from the shunt.
void test_victron_parse_and_check() {
    uint8_t data[] = { 0x0D, 0x0A, 0x50, 0x49, 0x44, 0x09, 0x30, 0x78, 0x41, 0x33, 0x38, 0x39, 0x0D, 0x0A, 0x56, 0x09, 0x2D, 0x36, 0x36, 0x0D, 0x0A, 0x49, 0x09, 0x2D, 0x33, 0x39, 0x37, 0x0D, 0x0A, 0x50, 0x09, 0x30, 0x0D, 0x0A, 0x43, 0x45, 0x09, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x53, 0x4F, 0x43, 0x09, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x54, 0x54, 0x47, 0x09, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x41, 0x6C, 0x61, 0x72, 0x6D, 0x09, 0x4F, 0x46, 0x46, 0x0D, 0x0A, 0x41, 0x52, 0x09, 0x30, 0x0D, 0x0A, 0x42, 0x4D, 0x56, 0x09, 0x53, 0x6D, 0x61, 0x72, 0x74, 0x53, 0x68, 0x75, 0x6E, 0x74, 0x20, 0x35, 0x30, 0x30, 0x41, 0x2F, 0x35, 0x30, 0x6D, 0x56, 0x0D, 0x0A, 0x46, 0x57, 0x09, 0x30, 0x34, 0x31, 0x33, 0x0D, 0x0A, 0x4D, 0x4F, 0x4E, 0x09, 0x30, 0x0D, 0x0A, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x73, 0x75, 0x6D, 0x09, 0xF5 };
    uint8_t data2[] = { 0x0D, 0x0A, 0x48, 0x31, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x32, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x33, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x34, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x35, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x36, 0x09, 0x2D, 0x36, 0x31, 0x37, 0x0D, 0x0A, 0x48, 0x37, 0x09, 0x2D, 0x34, 0x33, 0x32, 0x0D, 0x0A, 0x48, 0x38, 0x09, 0x31, 0x0D, 0x0A, 0x48, 0x39, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x31, 0x30, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x31, 0x31, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x31, 0x32, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x31, 0x35, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x31, 0x36, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x31, 0x37, 0x09, 0x30, 0x0D, 0x0A, 0x48, 0x31, 0x38, 0x09, 0x30, 0x0D, 0x0A, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x73, 0x75, 0x6D, 0x09, 0x5A };
    size_t data_size = 129;
    size_t data2_size = 121;

    ShuntPowerData output;
    victronParse(output, data, data_size);
    TEST_ASSERT_EQUAL_STRING("PID", output.labels[0].c_str());
    TEST_ASSERT_EQUAL_STRING("0xA389", output.fields[0].c_str());
    TEST_ASSERT_TRUE(victronChecksum(data, data_size));
    TEST_ASSERT_TRUE(output.fields.size() == output.labels.size() - 1); // checksum values are not coerced to char.

    victronParse(output, data2, data2_size);
    TEST_ASSERT_EQUAL_STRING("H1", output.labels[0].c_str());
    TEST_ASSERT_EQUAL_STRING("0", output.fields[0].c_str());
    TEST_ASSERT_TRUE(victronChecksum(data2, data2_size));
    TEST_ASSERT_TRUE(output.fields.size() == output.labels.size() - 1);
}

int main() {
    UNITY_BEGIN();
    RUN_TEST(test_checksum);
    RUN_TEST(test_victron_parse);
    RUN_TEST(test_victron_parse_and_check);
    UNITY_END();
}